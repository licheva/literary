// public/script.js
// –ö–ª–∏–µ–Ω—Ç—Å–∫–∏ –∫–æ–¥ –∑–∞ —Ä–∞–±–æ—Ç–∞ —Å API, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∏ –≤—ä–ø—Ä–æ—Å–∏—Ç–µ

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ –¥–∞–¥–µ–Ω –∞–≤—Ç–æ—Ä (–∑–∞—Ä–µ–∂–¥–∞ –≥–∏ –æ—Ç API)
function getQuestionsForAuthor(authorName, callback) {
  // fetch(`http://localhost:3000/api/questions?author=${encodeURIComponent(authorName)}`)
  fetch("https://literary-5zo2.onrender.com/api/questions?author=" + encodeURIComponent(authorName))
    .then(response => response.json())
    .then(data => callback(data))
    .catch(error => {
      console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ—Ç–æ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏:", error);
    });
}

// (–î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è displayQuestions –∑–∞ —Ç–µ—Å—Ç–æ–≤–µ)
function displayQuestions(questions) {
  const container = document.getElementById('questions-container');
  if (!container) return;
  container.innerHTML = "";
  questions.forEach(q => {
    const questionDiv = document.createElement('div');
    questionDiv.classList.add('question');
    questionDiv.innerHTML = `
      <p class="question-text">${q.question}</p>
      <button class="answer-btn" data-answer="${q.answer_a}">${q.answer_a}</button>
      <button class="answer-btn" data-answer="${q.answer_b}">${q.answer_b}</button>
      <button class="answer-btn" data-answer="${q.answer_c}">${q.answer_c}</button>
      <button class="answer-btn" data-answer="${q.answer_d}">${q.answer_d}</button>
    `;
    container.appendChild(questionDiv);
    const buttons = questionDiv.querySelectorAll('.answer-btn');
    buttons.forEach(btn => {
      btn.addEventListener('click', function() {
        const selectedAnswer = btn.getAttribute('data-answer');
        if (selectedAnswer === q.correct_answer) {
          alert("–ü—Ä–∞–≤–∏–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä!");
        } else {
          alert("–ì—Ä–µ—à–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä!");
        }
      });
    });
  });
}

// –ì–ª–æ–±–∞–ª–Ω–∏ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏ –∑–∞ –∏–≥—Ä–∞—Ç–∞
let currentUser = null;
let currentLevel = 1;
let score = 0;
let timerInterval = null;
let currentMaze = [];       // –ú–∞—Ç—Ä–∏—Ü–∞—Ç–∞ –Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
let revealedMaze = [];      // –°—Ç–∞—Ç—É—Å –Ω–∞ –∫–ª–µ—Ç–∫–∏—Ç–µ (0 - –≤–∏–¥–∏–º–∞, 1 - —Å–∫—Ä–∏—Ç–∞)
let playerPos = { row: 0, col: 0 };
let currentAuthor = null;   // –ò–∑–±—Ä–∞–Ω –∞–≤—Ç–æ—Ä
let gameQuestions = [];     // –©–µ –±—ä–¥–∞—Ç –∑–∞—Ä–µ–¥–µ–Ω–∏ –æ—Ç API
let wrongCellQuestion = {};
const MAX_LEVEL = 5;

// –ü—Ä–∏–º–µ—Ä–Ω–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∏ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∏ –¥–∞–Ω–Ω–∏)
const labyrinths = {
  vazov: {
    name: "–ò–≤–∞–Ω –í–∞–∑–æ–≤",
    levels: {
      1: [
        [
          [3, 0, 1, 0, 0, 0, 1],
          [1, 0, 1, 0, 1, 0, 1],
          [1, 0, 0, 0, 1, 0, 0],
          [1, 1, 1, 0, 1, 1, 0],
          [0, 0, 0, 0, 0, 0, 0],
          [1, 1, 1, 1, 1, 1, 4]
        ]
      ],
      2: [
        [
          [3, 0, 1, 0, 1, 0, 1],
          [1, 0, 0, 0, 1, 0, 1],
          [1, 1, 1, 0, 1, 0, 0],
          [1, 0, 0, 0, 0, 1, 0],
          [0, 0, 1, 0, 0, 0, 0],
          [1, 1, 1, 1, 1, 1, 4]
        ]
      ]
    }
  },
  aleko: {
    name: "–ê–ª–µ–∫–æ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤",
    levels: {
      1: [
        [
          [3, 0, 1, 0],
          [1, 0, 1, 4]
        ]
      ]
    }
  },
  pelin: {
    name: "–ï–ª–∏–Ω –ü–µ–ª–∏–Ω",
    levels: {
      1: [
        [
          [3, 0, 0, 1, 0, 0, 1],
          [1, 0, 1, 0, 1, 0, 0],
          [1, 0, 1, 0, 1, 1, 0],
          [1, 0, 0, 0, 0, 0, 0],
          [1, 1, 1, 1, 1, 0, 1],
          [0, 0, 0, 0, 0, 0, 4]
        ]
      ],
      2: [
        [
          [3, 0, 0, 1, 0, 0, 1],
          [1, 0, 0, 0, 1, 0, 0],
          [1, 0, 1, 0, 1, 1, 0],
          [1, 0, 0, 0, 0, 0, 0],
          [1, 1, 1, 0, 1, 0, 1],
          [0, 0, 0, 0, 0, 0, 4]
        ]
      ]
    }
  },
  yordan: {
    name: "–ô–æ—Ä–¥–∞–Ω –ô–æ–≤–∫–æ–≤",
    levels: {
      1: [
        [
          [3, 0, 1],
          [1, 0, 4]
        ]
      ]
    }
  },
  peyo: {
    name: "–ü–µ–π–æ –Ø–≤–æ—Ä–æ–≤",
    levels: {
      1: [
        [
          [3, 0, 0],
          [1, 1, 4]
        ]
      ]
    }
  },
  pencho: {
    name: "–ü–µ–Ω—á–æ –°–ª–∞–≤–µ–π–∫–æ–≤",
    levels: {
      1: [
        [
          [3, 0, 1, 0],
          [1, 1, 1, 4]
        ]
      ]
    }
  },
  hristo: {
    name: "–•—Ä–∏—Å—Ç–æ –ë–æ—Ç–µ–≤",
    levels: {
      1: [
        [
          [3, 0, 0, 1],
          [1, 0, 1, 4]
        ]
      ]
    }
  },
  dobri: {
    name: "–î–æ–±—Ä–∏ –ß–∏–Ω—Ç—É–ª–æ–≤",
    levels: {
      1: [
        [
          [3, 0, 1],
          [1, 0, 4]
        ]
      ]
    }
  },
  obobshtenie: {
    name: "–û–±–æ–±—â–µ–Ω–∏–µ",
    levels: {
      1: [
        [
          [3, 0, 0, 0, 0, 0, 4]
        ]
      ]
    }
  }
};

// –ó–∞—Ä–µ–∂–¥–∞–Ω–µ—Ç–æ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏—Ç–µ —Å—Ç–∞–≤–∞ –∏–∑—Ü—è–ª–æ —á—Ä–µ–∑ API, —Ç–∞–∫–∞ —á–µ –ª–æ–∫–∞–ª–Ω–∏—Ç–µ –≤—ä–ø—Ä–æ—Å–∏ —Ç—É–∫ –Ω–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞—Ç.

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ revealedMaze ‚Äì —Å–∞–º–æ –≤—Ö–æ–¥ (3) –∏ –∏–∑—Ö–æ–¥ (4) —Å–∞ –≤–∏–¥–∏–º–∏, –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ —Å–∞ —Å–∫—Ä–∏—Ç–∏
function initRevealedMaze() {
  revealedMaze = [];
  const rows = currentMaze.length;
  const cols = currentMaze[0].length;
  for (let i = 0; i < rows; i++) {
    revealedMaze[i] = [];
    for (let j = 0; j < cols; j++) {
      revealedMaze[i][j] = (currentMaze[i][j] === 3 || currentMaze[i][j] === 4) ? 0 : 1;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—è –∞–≤—Ç–æ—Ä –∏ –Ω–∏–≤–æ
function initMazeFromAuthor() {
  if (!currentAuthor) {
    console.log("–ù—è–º–∞ –∏–∑–±—Ä–∞–Ω –∞–≤—Ç–æ—Ä. –ù–µ –º–æ–≥–∞ –¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–º –ª–∞–±–∏—Ä–∏–Ω—Ç.");
    return;
  }
  console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º –ª–∞–±–∏—Ä–∏–Ω—Ç –∑–∞ –∞–≤—Ç–æ—Ä:", currentAuthor, "–ù–∏–≤–æ:", currentLevel);
  if (!labyrinths[currentAuthor]) {
    console.error("–õ–∞–±–∏—Ä–∏–Ω—Ç—ä—Ç –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—è –∞–≤—Ç–æ—Ä (" + currentAuthor + ") –Ω–µ –µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω.");
    return;
  }
  wrongCellQuestion = {};
  const levelMazes = labyrinths[currentAuthor].levels[currentLevel];
  if (!levelMazes || levelMazes.length === 0) {
    alert("–ù—è–º–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç –∑–∞ —Ç–æ–≤–∞ –Ω–∏–≤–æ.");
    return;
  }
  currentMaze = JSON.parse(JSON.stringify(levelMazes[0]));
  initRevealedMaze();
  // –ù–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞ –ø–æ–∑–∏—Ü–∏—è (–≤—Ö–æ–¥ ‚Äì —Å—Ç–æ–π–Ω–æ—Å—Ç 3)
  for (let r = 0; r < currentMaze.length; r++) {
    for (let c = 0; c < currentMaze[r].length; c++) {
      if (currentMaze[r][c] === 3) {
        playerPos = { row: r, col: c };
      }
    }
  }
  renderMaze();
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
function renderMaze() {
  const mazeDiv = document.getElementById('maze-active');
  mazeDiv.innerHTML = "";
  const rows = currentMaze.length;
  const cols = currentMaze[0].length;
  mazeDiv.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
  mazeDiv.style.gridTemplateRows = `repeat(${rows}, 1fr)`;
  
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      const cellDiv = document.createElement('div');
      cellDiv.classList.add('cell');
      cellDiv.dataset.row = i;
      cellDiv.dataset.col = j;
      
      if (revealedMaze[i][j] === 0) {
        cellDiv.classList.add('path');
      }
      if (currentMaze[i][j] === 3) {
        cellDiv.classList.add('entrance');
        const hint = getNextStepDirection(currentMaze, playerPos);
        if (hint) {
          cellDiv.dataset.hint = hint.name;
          cellDiv.classList.add('hint');
        }
      }
      if (currentMaze[i][j] === 4) {
        cellDiv.classList.add('exit');
      }
      if (i === playerPos.row && j === playerPos.col) {
        cellDiv.classList.add('player');
        cellDiv.textContent = "üôÇ";
      }
      
      cellDiv.addEventListener('click', () => {
        handleCellClick(i, j);
      });
      mazeDiv.appendChild(cellDiv);
    }
  }
}

function updateScore(points) {
  score += points;
  document.getElementById('score').textContent = score;
}

function movePlayer(newRow, newCol) {
  console.log("–ü—Ä–µ–º–µ—Å—Ç–≤–∞–º –≥–µ—Ä–æ—è –æ—Ç", playerPos, "–¥–æ", { row: newRow, col: newCol });
  playerPos = { row: newRow, col: newCol };
  renderMaze();
  if (currentMaze[newRow][newCol] === 4) {
    alert("–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –ò–∑–ª—è–∑–æ—Ö—Ç–µ –æ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞!");
    updateScore(100);
    document.getElementById('next-level').classList.remove('hidden');
  }
}

function isAdjacent(r1, c1, r2, c2) {
  return (Math.abs(r1 - r2) + Math.abs(c1 - c2)) === 1;
}

function handleCellClick(row, col) {
  if (!isAdjacent(playerPos.row, playerPos.col, row, col)) {
    alert("–ú–æ–∂–µ—Ç–µ –¥–∞ —Å–µ –¥–≤–∏–∂–∏—Ç–µ —Å–∞–º–æ –∫—ä–º —Å—ä—Å–µ–¥–Ω–∏ –∫–ª–µ—Ç–∫–∏!");
    return;
  }
  if (currentMaze[row][col] === 1) {
    alert("–¢–æ–≤–∞ –µ —Å—Ç–µ–Ω–∞!");
    return;
  }
  showQuestion(row, col, function(success) {
    if (success) {
      revealedMaze[row][col] = 0;
      updateScore(10);
      const oldDistance = getShortestPathDistance(currentMaze, playerPos);
      movePlayer(row, col);
      const newDistance = getShortestPathDistance(currentMaze, playerPos);
      if (newDistance > oldDistance) {
        const bonus = (newDistance - oldDistance) * 5;
        updateScore(bonus);
        alert("–ò–∑–±—Ä–∞—Ö—Ç–µ –ø–æ-–¥—ä–ª—ä–≥ –ø—ä—Ç, –ø–æ–ª—É—á–∞–≤–∞—Ç–µ –±–æ–Ω—É—Å " + bonus + " —Ç–æ—á–∫–∏!");
      }
    }
  });
}

function showQuestion(row, col, callback) {
  const questionContainer = document.getElementById('question-container');
  const questionText = document.getElementById('question-text');
  const answersDiv = document.getElementById('answers');
  const cellKey = row + "_" + col;
  // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ API –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å –∑–∞ —Ç–µ–∫—É—â–∏—è –∞–≤—Ç–æ—Ä
  getQuestionsForAuthor(currentAuthor, function(questions) {
    if (!questions || questions.length === 0) {
      alert("–ù—è–º–∞ –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—è –∞–≤—Ç–æ—Ä.");
      return;
    }
    // –ò–∑–±–∏—Ä–∞–º–µ –ø—Ä–æ–∏–∑–≤–æ–ª–µ–Ω –≤—ä–ø—Ä–æ—Å
    const randomIndex = Math.floor(Math.random() * questions.length);
    const q = questions[randomIndex];
    // –ó–∞–ø–∞–∑–≤–∞–º–µ –≤—ä–ø—Ä–æ—Å–∞ –∑–∞ –∫–ª–µ—Ç–∫–∞—Ç–∞
    wrongCellQuestion[cellKey] = q;
    questionText.textContent = q.question;
    answersDiv.innerHTML = "";
    if (q.answer_a) answersDiv.insertAdjacentHTML('beforeend', `<button class="answer-btn" data-answer="${q.answer_a}">${q.answer_a}</button>`);
    if (q.answer_b) answersDiv.insertAdjacentHTML('beforeend', `<button class="answer-btn" data-answer="${q.answer_b}">${q.answer_b}</button>`);
    if (q.answer_c) answersDiv.insertAdjacentHTML('beforeend', `<button class="answer-btn" data-answer="${q.answer_c}">${q.answer_c}</button>`);
    if (q.answer_d) answersDiv.insertAdjacentHTML('beforeend', `<button class="answer-btn" data-answer="${q.answer_d}">${q.answer_d}</button>`);
    const buttons = answersDiv.querySelectorAll('.answer-btn');
    buttons.forEach(btn => {
      btn.addEventListener('click', function() {
        clearInterval(timerInterval);
        if (btn.getAttribute('data-answer') === q.correct_answer) {
          alert("–ü—Ä–∞–≤–∏–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä!");
          const nextStep = getNextStepDirection(currentMaze, playerPos);
          if (nextStep) {
            alert("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–æ–¥—ä–ª–∂–µ—Ç–µ " + nextStep.name + ".");
          }
          questionContainer.classList.add('hidden');
          delete wrongCellQuestion[cellKey];
          callback(true);
        } else {
          currentMaze[row][col] = -1;
          renderMaze();
          questionContainer.classList.add('hidden');
          openExplanationWindow(q.explanation, function() {
            questionContainer.classList.remove('hidden');
            callback(false);
          });
        }
      });
    });
    questionContainer.classList.remove('hidden');
  });
}

function startTimer(duration, display, onTimeUp) {
  let timer = duration;
  clearInterval(timerInterval);
  timerInterval = setInterval(function() {
    display.textContent = timer;
    if (--timer < 0) {
      clearInterval(timerInterval);
      onTimeUp();
    }
  }, 1000);
}

function getShortestPathDistance(maze, startPos) {
  const rows = maze.length;
  const cols = maze[0].length;
  const visited = Array.from({ length: rows }, () => Array(cols).fill(false));
  const queue = [];
  queue.push({ row: startPos.row, col: startPos.col, distance: 0 });
  visited[startPos.row][startPos.col] = true;
  while (queue.length > 0) {
    const current = queue.shift();
    if (maze[current.row][current.col] === 4) {
      return current.distance;
    }
    const directions = [
      { dr: -1, dc: 0 },
      { dr: 1, dc: 0 },
      { dr: 0, dc: -1 },
      { dr: 0, dc: 1 }
    ];
    for (const dir of directions) {
      const newRow = current.row + dir.dr;
      const newCol = current.col + dir.dc;
      if (
        newRow >= 0 && newRow < rows &&
        newCol >= 0 && newCol < cols &&
        !visited[newRow][newCol] &&
        maze[newRow][newCol] !== 1
      ) {
        visited[newRow][newCol] = true;
        queue.push({ row: newRow, col: newCol, distance: current.distance + 1 });
      }
    }
  }
  return Infinity;
}

function getNextStepDirection(maze, startPos) {
  const rows = maze.length;
  const cols = maze[0].length;
  
  function isValid(r, c) {
    return r >= 0 && r < rows && c >= 0 && c < cols && maze[r][c] !== 1;
  }
  
  const queue = [];
  const visited = Array.from({ length: rows }, () => Array(cols).fill(false));
  queue.push({ row: startPos.row, col: startPos.col, path: [] });
  visited[startPos.row][startPos.col] = true;
  
  const directions = [
    { dr: -1, dc: 0, name: "–Ω–∞–≥–æ—Ä–µ" },
    { dr: 1, dc: 0, name: "–Ω–∞–¥–æ–ª—É" },
    { dr: 0, dc: -1, name: "–Ω–∞–ª—è–≤–æ" },
    { dr: 0, dc: 1, name: "–Ω–∞–¥—è—Å–Ω–æ" }
  ];
  
  while (queue.length > 0) {
    const current = queue.shift();
    if (maze[current.row][current.col] === 4) {
      return current.path.length > 0 ? current.path[0] : null;
    }
    for (const dir of directions) {
      const newRow = current.row + dir.dr;
      const newCol = current.col + dir.dc;
      if (isValid(newRow, newCol) && !visited[newRow][newCol]) {
        visited[newRow][newCol] = true;
        const newPath = current.path.concat(dir);
        queue.push({ row: newRow, col: newCol, path: newPath });
      }
    }
  }
  return null;
}

function openExplanationWindow(text, callback) {
  alert("–û–±—è—Å–Ω–µ–Ω–∏–µ: " + text);
  if (typeof callback === "function") callback();
}

// DOMContentLoaded event handler
document.addEventListener("DOMContentLoaded", function() {
  console.log("DOM –∑–∞—Ä–µ–¥–µ–Ω, —Å—Ç–∞—Ä—Ç–∏—Ä–∞–º —Å–∫—Ä–∏–ø—Ç–∞.");
  
  // –õ–æ–≥–∏–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∞ (dummy –ª–æ–≥–∏–Ω)
  document.getElementById('login-btn').addEventListener('click', function() {
    const usernameInput = document.getElementById('username').value.trim();
    if (usernameInput === "") {
      alert("–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ.");
      return;
    }
    currentUser = usernameInput;
    document.getElementById('display-username').textContent = currentUser;
    // –°–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ –Ω–∞—á–∞–ª–Ω–∏—è –µ–∫—Ä–∞–Ω –∏ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏—è –µ–∫—Ä–∞–Ω –∏ sidebar-–∞
    document.getElementById('initial-screen').classList.add('hidden');
    document.getElementById('sidebar').classList.remove('hidden');
    document.getElementById('game-container').classList.remove('hidden');
    console.log("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç —Å–µ –ª–æ–≥–Ω–∞ —É—Å–ø–µ—à–Ω–æ.");
  });
  
  // –ò–∑–±–æ—Ä –Ω–∞ –∞–≤—Ç–æ—Ä –æ—Ç sidebar
  const authorButtons = document.querySelectorAll('.author-btn');
  authorButtons.forEach(btn => {
    btn.addEventListener('click', function() {
      authorButtons.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      currentAuthor = btn.getAttribute('data-author');
      console.log("–ò–∑–±—Ä–∞–Ω –∞–≤—Ç–æ—Ä:", currentAuthor);
      
      // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏ –æ—Ç API –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—è –∞–≤—Ç–æ—Ä
      getQuestionsForAuthor(currentAuthor, function(questions) {
        console.log("–ü–æ–ª—É—á–µ–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ –∞–≤—Ç–æ—Ä–∞:", questions);
        gameQuestions = questions;
        displayQuestions(questions);
      });
      
      initMazeFromAuthor();
    });
  });
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—ä—Å —Å—Ç—Ä–µ–ª–∫–∏
  document.addEventListener('keydown', function(event) {
    const directions = {
      ArrowUp: { dr: -1, dc: 0 },
      ArrowDown: { dr: 1, dc: 0 },
      ArrowLeft: { dr: 0, dc: -1 },
      ArrowRight: { dr: 0, dc: 1 }
    };
    if (directions[event.key]) {
      const { dr, dc } = directions[event.key];
      const newRow = playerPos.row + dr;
      const newCol = playerPos.col + dc;
      if (
        newRow >= 0 && newRow < currentMaze.length &&
        newCol >= 0 && newCol < currentMaze[0].length &&
        revealedMaze[newRow][newCol] === 0
      ) {
        movePlayer(newRow, newCol);
      }
    }
  });
  
  // –ë—É—Ç–æ–Ω–∏ "–°–ª–µ–¥–≤–∞—â–æ –Ω–∏–≤–æ" –∏ "–ò–∑—Ö–æ–¥"
  document.getElementById('next-level').addEventListener('click', function() {
    if (currentLevel < MAX_LEVEL) {
      currentLevel++;
      document.getElementById('current-level').textContent = currentLevel;
      initMazeFromAuthor();
      document.getElementById('next-level').classList.add('hidden');
    } else {
      alert("–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –í–∏–µ –ø—Ä–∏–∫–ª—é—á–∏—Ö—Ç–µ –∏–≥—Ä–∞—Ç–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–Ω–æ –Ω–∏–≤–æ.");
    }
  });
  
  document.getElementById('exit-btn').addEventListener('click', function() {
    document.getElementById('initial-screen').classList.remove('hidden');
    document.getElementById('game-container').classList.add('hidden');
    document.getElementById('sidebar').classList.add('hidden');
    currentLevel = 1;
    score = 0;
  });
});
