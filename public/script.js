// script.js

// –ì–ª–æ–±–∞–ª–Ω–∏ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏
let currentUser = null;
let currentLevel = 1;
let score = 0;
let currentMaze = [];
let revealedMaze = [];
let playerPos = { row: 0, col: 0 };
let currentAuthor = null;
let gameQuestions = [];
const MAX_LEVEL = 5;

// –ü—Ä–∏–º–µ—Ä–Ω–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∏ –∑–∞ 12 –∞–≤—Ç–æ—Ä–∞ (2 –Ω–∏–≤–∞ ‚Äì –ø—Ä–∏–º–µ—Ä–Ω–æ)
const labyrinths = {
  vazov: {
    name: "–ò–≤–∞–Ω –í–∞–∑–æ–≤",
    levels: {
      1: [
        [
          [3, 0, 1],
          [1, 0, 4],
          [1, 1, 1]
        ]
      ],
      2: [
        [
          [3, 0, 1, 0],
          [1, 0, 0, 0],
          [1, 1, 1, 0],
          [1, 1, 1, 4]
        ]
      ]
    }
  },
  aleko: {
    name: "–ê–ª–µ–∫–æ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤",
    levels: {
      1: [
        [
          [3, 0, 1],
          [1, 0, 4]
        ]
      ],
      2: [
        [
          [3, 0, 1, 0],
          [1, 0, 1, 0],
          [1, 0, 0, 0],
          [1, 1, 1, 4]
        ]
      ]
    }
  },
  pelin: {
    name: "–ï–ª–∏–Ω –ü–µ–ª–∏–Ω",
    levels: {
      1: [
        [
          [3, 0, 1],
          [1, 0, 4]
        ]
      ],
      2: [
        [
          [3, 0, 1, 0],
          [1, 0, 0, 0],
          [1, 1, 1, 4]
        ]
      ]
    }
  },
  yordan: {
    name: "–ô–æ—Ä–¥–∞–Ω –ô–æ–≤–∫–æ–≤",
    levels: {
      1: [
        [
          [3, 0, 1],
          [1, 0, 4]
        ]
      ],
      2: [
        [
          [3, 0, 1],
          [1, 0, 0],
          [1, 1, 4]
        ]
      ]
    }
  },
  peyo: {
    name: "–ü–µ–π–æ –Ø–≤–æ—Ä–æ–≤",
    levels: {
      1: [
        [
          [3, 0],
          [0, 4]
        ]
      ],
      2: [
        [
          [3, 0, 1],
          [1, 0, 4]
        ]
      ]
    }
  },
  petko: {
    name: "–ü–µ—Ç–∫–æ –°–ª–∞–≤–µ–π–∫–æ–≤",
    levels: {
      1: [
        [
          [3, 0, 4]
        ]
      ],
      2: [
        [
          [3, 0, 1],
          [1, 1, 4]
        ]
      ]
    }
  },
  hristo: {
    name: "–•—Ä–∏—Å—Ç–æ –ë–æ—Ç–µ–≤",
    levels: {
      1: [
        [
          [3, 0],
          [1, 4]
        ]
      ],
      2: [
        [
          [3, 0, 1],
          [1, 0, 4]
        ]
      ]
    }
  },
  dobri: {
    name: "–î–æ–±—Ä–∏ –ß–∏–Ω—Ç—É–ª–æ–≤",
    levels: {
      1: [
        [
          [3, 0, 4]
        ]
      ],
      2: [
        [
          [3, 0],
          [0, 4]
        ]
      ]
    }
  },
  
  veselin: {
    name: "–í–µ—Å–µ–ª–∏–Ω –•–∞–Ω—á–µ–≤",
    levels: {
      1: [
        [
          [3, 0, 4]
        ]
      ],
      2: [
        [
          [3, 0],
          [1, 4]
        ]
      ]
    }
  },
  lyuben: {
    name: "–õ—é–±–µ–Ω –ö–∞—Ä–∞–≤–µ–ª–æ–≤",
    levels: {
      1: [
        [
          [3, 0, 4]
        ]
      ],
      2: [
        [
          [3, 0],
          [1, 4]
        ]
      ]
    }
  },
  smirnenski: {
    name: "–•—Ä–∏—Å—Ç–æ –°–º–∏—Ä–Ω–µ–Ω—Å–∫–∏",
    levels: {
      1: [
        [
          [3, 0, 4]
        ]
      ],
      2: [
        [
          [3, 0],
          [1, 4]
        ]
      ]
    }
  },
  obobshtenie: {
    name: "–û–±–æ–±—â–µ–Ω–∏–µ",
    levels: {
      1: [
        [
          [0, 0, 0],
          [3, 1, 4]
        ]
      ],
      2: [
        [
          [3, 0, 1],
          [1, 0, 4]
        ]
      ]
    }
  },
  nvo2022: {
    name: "–ù–í–û 2022",
    levels: {
      1: [
        [
          [3, 0, 1],
          [1, 0, 4],
          [1, 1, 1]
        ]
      ],
      2: [
        [
          [3, 0, 1, 0],
          [1, 0, 0, 0],
          [1, 1, 1, 0],
          [1, 1, 1, 4]
        ]
      ]
    }
  },
  nvo2023: {
    name: "–ù–í–û 2023",
    levels: {
      1: [
        [
          [3, 0, 1],
          [1, 0, 4],
          [1, 1, 1]
        ]
      ],
      2: [
        [
          [3, 0, 1, 0],
          [1, 0, 0, 0],
          [1, 1, 1, 0],
          [1, 1, 1, 4]
        ]
      ]
    }
  },
};

// –ú–∞–ø–∏–Ω–≥ –Ω–∞ –∫—Ä–∞—Ç–∫–∏ –∏–º–µ–Ω–∞ –∫—ä–º –ø—ä–ª–Ω–æ –∏–º–µ
const authorDisplayName = {
  "vazov": "–ò–≤–∞–Ω –í–∞–∑–æ–≤",
  "aleko": "–ê–ª–µ–∫–æ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤",
  "pelin": "–ï–ª–∏–Ω –ü–µ–ª–∏–Ω",
  "yordan": "–ô–æ—Ä–¥–∞–Ω –ô–æ–≤–∫–æ–≤",
  "peyo": "–ü–µ–π–æ –Ø–≤–æ—Ä–æ–≤",
  "pencho": "–ü–µ–Ω—á–æ –°–ª–∞–≤–µ–π–∫–æ–≤",
  "hristo": "–•—Ä–∏—Å—Ç–æ –ë–æ—Ç–µ–≤",
  "dobri": "–î–æ–±—Ä–∏ –ß–∏–Ω—Ç—É–ª–æ–≤",
  "obobshtenie": "–û–±–æ–±—â–µ–Ω–∏–µ",
  "petko": "–ü–µ—Ç–∫–æ –°–ª–∞–≤–µ–π–∫–æ–≤",
  "lyuben": "–õ—é–±–µ–Ω –ö–∞—Ä–∞–≤–µ–ª–æ–≤",
  "smirnenski": "–•—Ä–∏—Å—Ç–æ –°–º–∏—Ä–Ω–µ–Ω—Å–∫–∏",
  "nvo2022": "–ù–í–û 2022",
  "nvo2023": "–ù–í–û 2023",
  "nvo2022": "–ù–í–û 2024"

};

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏ (–ø—Ä–∏–º–µ—Ä–µ–Ω API)
function getQuestionsForAuthor(authorName, callback) {
  // fetch(`http://localhost:3000/api/questions?author=${encodeURIComponent(authorName)}`)
     fetch(`https://literary-5zo2.onrender.com/api/questions?author=${encodeURIComponent(authorName)}`)
    .then(r => r.json())
    .then(data => callback(data))
    .catch(err => console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏:", err));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
function initMazeFromAuthor() {
  if (!currentAuthor) return;
  const labyrinthData = labyrinths[currentAuthor];
  if (!labyrinthData) {
    console.error("–ù—è–º–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç –∑–∞ —Ç–æ–∑–∏ –∞–≤—Ç–æ—Ä:", currentAuthor);
    return;
  }
  currentLevel = 1;
  document.getElementById('current-level').textContent = currentLevel;
  loadMazeLevel(currentAuthor, currentLevel);
}

// –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –Ω–∏–≤–æ
function loadMazeLevel(authorKey, level) {
  const levelMazes = labyrinths[authorKey].levels[level];
  if (!levelMazes) {
    alert("–ù—è–º–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç –∑–∞ —Ç–æ–≤–∞ –Ω–∏–≤–æ.");
    return;
  }
  currentMaze = JSON.parse(JSON.stringify(levelMazes[0]));
  initRevealedMaze();
  
  // –ù–∞–º–∏—Ä–∞–º–µ –≤—Ö–æ–¥ (3)
  for (let r = 0; r < currentMaze.length; r++) {
    for (let c = 0; c < currentMaze[r].length; c++) {
      if (currentMaze[r][c] === 3) {
        playerPos = { row: r, col: c };
      }
    }
  }
  
  getQuestionsForAuthor(currentAuthor, (questions) => {
    gameQuestions = questions;
    renderMaze();
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ revealedMaze
function initRevealedMaze() {
  revealedMaze = [];
  const rows = currentMaze.length;
  const cols = currentMaze[0].length;
  for (let i = 0; i < rows; i++) {
    revealedMaze[i] = [];
    for (let j = 0; j < cols; j++) {
      revealedMaze[i][j] = (currentMaze[i][j] === 3 || currentMaze[i][j] === 4) ? 0 : 1;
    }
  }
}

// –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
function renderMaze() {
  const mazeDiv = document.getElementById('maze-active');
  mazeDiv.innerHTML = "";
  const rows = currentMaze.length;
  const cols = currentMaze[0].length;
  
  mazeDiv.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
  mazeDiv.style.gridTemplateRows = `repeat(${rows}, 1fr)`;
  
  for (let r = 0; r < rows; r++) {
    for (let c = 0; c < cols; c++) {
      const cell = document.createElement('div');
      cell.classList.add('cell');
      cell.dataset.row = r;
      cell.dataset.col = c;
      
      if (revealedMaze[r][c] === 0) {
        cell.classList.add('path');
      }
      if (currentMaze[r][c] === 3) {
        cell.classList.add('entrance');
        const hint = getNextStepDirection(currentMaze, playerPos);
        if (hint) {
          cell.dataset.hint = hint.name;
          cell.classList.add('hint');
        }
      }
      if (currentMaze[r][c] === 4) {
        cell.classList.add('exit');
      }
      if (r === playerPos.row && c === playerPos.col) {
        cell.classList.add('player');
      }
      
      cell.addEventListener('click', () => handleCellClick(r, c));
      mazeDiv.appendChild(cell);
    }
  }
  updateHeroPosition();
}

// –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–∞–Ω–µ –Ω–∞ –≥–µ—Ä–æ—è ‚Äì —Ü–µ–Ω—Ç—Ä–∏—Ä–∞–Ω (–±–µ–∑ offset)
function updateHeroPosition() {
  const mazeActive = document.getElementById('maze-active');
  const hero = document.getElementById('hero');
  if (!mazeActive || !hero) return;
  
  const rows = currentMaze.length;
  const cols = currentMaze[0].length;
  const cellWidth = mazeActive.clientWidth / cols;
  const cellHeight = mazeActive.clientHeight / rows;
  const cellX = playerPos.col * cellWidth;
  const cellY = playerPos.row * cellHeight;
  
  // –ë–µ–∑ –∏–∑–º–µ—Å—Ç–≤–∞–Ω–µ, –∑–∞ –¥–∞ –µ —Ü–µ–Ω—Ç—Ä–∏—Ä–∞–Ω
  hero.style.left = cellX + "px";
  hero.style.top = cellY + "px";
  hero.style.width = cellWidth + "px";
  hero.style.height = cellHeight + "px";
  hero.style.lineHeight = cellHeight + "px";
  hero.textContent = "üïµ";
  // hero.textContent = "üôÇ";
}

// –ö–ª–∏–∫ –≤—ä—Ä—Ö—É –∫–ª–µ—Ç–∫–∞
function handleCellClick(row, col) {
  if (!isAdjacent(playerPos.row, playerPos.col, row, col)) {
    alert("–ú–æ–∂–µ—Ç–µ –¥–∞ —Å–µ –¥–≤–∏–∂–∏—Ç–µ —Å–∞–º–æ –∫—ä–º —Å—ä—Å–µ–¥–Ω–∏ –∫–ª–µ—Ç–∫–∏!");
    return;
  }
  if (currentMaze[row][col] === 1) {
    alert("–¢–æ–≤–∞ –µ —Å—Ç–µ–Ω–∞!");
    return;
  }
  showQuestion(() => {
    const cell = document.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
    if (cell) {
      cell.classList.add('open-door');
      doorSound.play();
      setTimeout(() => {
        revealedMaze[row][col] = 0;
        updateScore(10);
        const oldDist = getShortestPathDistance(currentMaze, playerPos);
        movePlayer(row, col);
        const newDist = getShortestPathDistance(currentMaze, playerPos);
        if (newDist > oldDist) {
          alert("–í—Ä—ä—â–∞—à —Å–µ –Ω–∞–∑–∞–¥, —Å–ª–µ–¥–≤–∞–π –ø–æ—Å–æ–∫–∞—Ç–∞ –∏ –æ—Ç–≥–æ–≤–∞—Ä—è–π –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏—Ç–µ, –∑–∞ –¥–∞ –∏–∑–ª–µ–∑–µ—à –æ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞.");
        }
      }, 1500);
    } else {
      revealedMaze[row][col] = 0;
      updateScore(10);
      movePlayer(row, col);
    }
  });
}

function movePlayer(newRow, newCol) {
  playerPos = { row: newRow, col: newCol };
  renderMaze();
  if (currentMaze[newRow][newCol] === 4) {
    alert("–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –ò–∑–ª—è–∑–æ—Ö—Ç–µ –æ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞!");
    updateScore(100);
    document.getElementById('next-level').classList.remove('hidden');
  }
}

function isAdjacent(r1, c1, r2, c2) {
  return (Math.abs(r1 - r2) + Math.abs(c1 - c2)) === 1;
}

function updateScore(points) {
  score += points;
  document.getElementById('score').textContent = score;
}

// –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å
function showQuestion(onCorrect) {
  if (gameQuestions.length === 0) {
    onCorrect();
    return;
  }
  const randomIndex = Math.floor(Math.random() * gameQuestions.length);
  const q = gameQuestions[randomIndex];
  
  const modal = document.getElementById('question-modal');
  modal.classList.remove('hidden');
  
  document.getElementById('question-title').textContent = "–í—ä–ø—Ä–æ—Å";
  document.getElementById('question-text').textContent = q.question;
  
  const answersDiv = document.getElementById('question-answers');
  answersDiv.innerHTML = "";
  
  if (q.type === 'matching') {
    renderMatchingDragDrop(q, answersDiv, () => {
      gameQuestions.splice(randomIndex, 1);
      closeQuestionModal();
      onCorrect();
    });
  } else if (q.type === 'multiple_choice') {
    (q.options || []).forEach(opt => {
      const btn = document.createElement('button');
      btn.textContent = `${opt.label}) ${opt.option_text}`;
      btn.addEventListener('click', () => {
  if (opt.is_correct) {
    correctSound.play().catch(err => console.error("Error playing correct sound:", err));
    alert("–ü—Ä–∞–≤–∏–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä!");
    gameQuestions.splice(randomIndex, 1);
    closeQuestionModal();
    onCorrect();
  } else {
    wrongSound.play().catch(err => console.error("Error playing wrong sound:", err));
    alert("–ì—Ä–µ—à–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä! –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.");
  }
});

      answersDiv.appendChild(btn);
      answersDiv.appendChild(document.createElement('br'));
    });



  // } else if (q.type === 'true_false') {
  //   (q.options || []).forEach(opt => {
  //     const btn = document.createElement('button');
  //     btn.textContent = opt.option_text;
  //     btn.addEventListener('click', () => {
  //       if (opt.is_correct) {
  //         alert("–ü—Ä–∞–≤–∏–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä!");
  //         gameQuestions.splice(randomIndex, 1);
  //         closeQuestionModal();
  //         onCorrect();
  //       } else {
  //         alert("–ì—Ä–µ—à–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä! –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.");
  //       }
  //     });
  //     answersDiv.appendChild(btn);
  //   });

} else if (q.type === 'true_false') {
  (q.options || []).forEach(opt => {
    const btn = document.createElement('button');
    btn.textContent = opt.option_text;
    btn.addEventListener('click', () => {
      if (opt.is_correct) {
        correctSound.play().catch(err => console.error("Error playing correct sound:", err));
        alert("–ü—Ä–∞–≤–∏–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä!");
        closeQuestionModal();
        onCorrect();
      } else {
        wrongSound.play().catch(err => console.error("Error playing wrong sound:", err));
        alert("–ì—Ä–µ—à–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä! –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.");
      }
    });
    answersDiv.appendChild(btn);
  });
}
}

function closeQuestionModal() {
  document.getElementById('question-modal').classList.add('hidden');
}
// –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–∞–ª
document.getElementById('nvo-btn').addEventListener('click', () => {
  document.getElementById('nvo-modal').classList.remove('hidden');
  document.getElementById('nvo-modal').classList.add('visible');
});

// –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª
document.getElementById('nvo-close-btn').addEventListener('click', () => {
  document.getElementById('nvo-modal').classList.remove('visible');
  document.getElementById('nvo-modal').classList.add('hidden');
});

// // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∏–∑–±–æ—Ä–∞ –Ω–∞ –≥–æ–¥–∏–Ω–∞
// document.getElementById('nvo-select-btn').addEventListener('click', () => {
//   const select = document.getElementById('nvo-year-select');
//   const selectedKey = select.value; // –Ω–∞–ø—Ä. "nvoup2021"
//   if (!selectedKey) {
//     alert("–ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –≥–æ–¥–∏–Ω–∞!");
//     return;
//   }
//   document.getElementById('nvo-modal').classList.remove('visible');
//   document.getElementById('nvo-modal').classList.add('hidden');
//   selectAuthor(selectedKey);
// });

// Drag & drop (matching)
// LLLLLL
function renderMatchingDragDrop(q, container, onCorrect) {
  const wrapper = document.createElement('div');
  wrapper.classList.add('matching-wrapper');
  
  const leftCol = document.createElement('div');
  leftCol.classList.add('left-col');
  
  (q.options || []).forEach(opt => {
    const item = document.createElement('div');
    item.classList.add('draggable-item');
    item.setAttribute('draggable', 'true');
    item.dataset.matchKey = opt.matching_key;
    item.textContent = `${opt.label}) ${opt.option_text}`;
    
    item.addEventListener('dragstart', handleDragStart);
    item.addEventListener('dragend', handleDragEnd);
    leftCol.appendChild(item);
  });
  
  const rightCol = document.createElement('div');
  rightCol.classList.add('right-col');
  
  let explanationText = (q.explanation || "").replace(/\\n/g, '\n');
  const lines = explanationText.split('\n');
  
  lines.forEach(line => {
    const mk = line.trim().charAt(0);
    const row = document.createElement('div');
    row.classList.add('matching-right-item-row');
    
    const zoneLabel = document.createElement('div');
    zoneLabel.classList.add('zone-label');
    zoneLabel.textContent = line;
    
    const zoneDrop = document.createElement('div');
    zoneDrop.classList.add('droppable-zone');
    zoneDrop.dataset.matchKey = mk;
    
    zoneDrop.addEventListener('dragover', handleDragOver);
    zoneDrop.addEventListener('drop', handleDrop);
    zoneDrop.addEventListener('dragenter', () => zoneDrop.classList.add('drag-over'));
    zoneDrop.addEventListener('dragleave', () => zoneDrop.classList.remove('drag-over'));
    
    row.appendChild(zoneLabel);
    row.appendChild(zoneDrop);
    rightCol.appendChild(row);
  });
  
  wrapper.appendChild(leftCol);
  wrapper.appendChild(rightCol);
  container.appendChild(wrapper);
  
  const checkBtn = document.createElement('button');
  checkBtn.textContent = "–ü—Ä–æ–≤–µ—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ—Ç–æ";
  checkBtn.addEventListener('click', () => {
    const zones = wrapper.querySelectorAll('.droppable-zone');
    let allCorrect = true;
    zones.forEach(zone => {
      const draggedItem = zone.querySelector('.draggable-item');
      if (!draggedItem || zone.dataset.matchKey !== draggedItem.dataset.matchKey) {
        allCorrect = false;
      }
    });
    // if (allCorrect) {
    //   alert("–í—Å–∏—á–∫–æ –µ —Å–≤—ä—Ä–∑–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–Ω–æ!");
    //   closeQuestionModal();
    //   onCorrect();
    // } else {
    //   alert("–ò–º–∞ –≥—Ä–µ—à–∫–∏. –û–ø–∏—Ç–∞–π—Ç–µ –ø–∞–∫!");
    //   zones.forEach(zone => {
    //     const item = zone.querySelector('.draggable-item');
    //     if (item) {
    //       leftCol.appendChild(item);
    //     }
    //   });
    // }
    if (allCorrect) {
      correctSound.play().catch(err => console.error("Error playing correct sound:", err));
      alert("–í—Å–∏—á–∫–æ –µ —Å–≤—ä—Ä–∑–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–Ω–æ!");
      closeQuestionModal();
      onCorrect();
    } else {
      wrongSound.play().catch(err => console.error("Error playing wrong sound:", err));
      alert("–ò–º–∞ –≥—Ä–µ—à–∫–∏. –û–ø–∏—Ç–∞–π—Ç–µ –ø–∞–∫!");
      zones.forEach(zone => {
        const item = zone.querySelector('.draggable-item');
        if (item) {
          leftCol.appendChild(item);
        }
      });
    }
    
  });
  // wrapper.appendChild(checkBtn);
  container.appendChild(checkBtn);
}



// –õ–õ–õ–õ;;–õ;–õ 
// Drag & drop
function handleDragStart(e) {
  e.dataTransfer.setData('text/plain', e.target.dataset.matchKey);
  e.target.classList.add('dragging');
}
function handleDragEnd(e) {
  e.target.classList.remove('dragging');
}
function handleDragOver(e) {
  e.preventDefault();
}
function handleDrop(e) {
  e.preventDefault();
  const zone = e.target;
  zone.classList.remove('drag-over');
  // const zoneText = zone.textContent;
  // zone.innerHTML = zoneText;
  const draggingItem = document.querySelector('.dragging');
  if (draggingItem) {
    zone.appendChild(draggingItem);
  }
}

// BFS ‚Äì –ø–æ–¥—Å–∫–∞–∑–∫–∞
function getNextStepDirection(maze, startPos) {
  const rows = maze.length;
  const cols = maze[0].length;
  function isValid(r, c) {
    return r >= 0 && r < rows && c >= 0 && c < cols && maze[r][c] !== 1;
  }
  const queue = [];
  const visited = Array.from({ length: rows }, () => Array(cols).fill(false));
  queue.push({ row: startPos.row, col: startPos.col, path: [] });
  visited[startPos.row][startPos.col] = true;
  
  const directions = [
    { dr: -1, dc: 0, name: "–Ω–∞–≥–æ—Ä–µ" },
    { dr: 1, dc: 0, name: "–Ω–∞–¥–æ–ª—É" },
    { dr: 0, dc: -1, name: "–Ω–∞–ª—è–≤–æ" },
    { dr: 0, dc: 1, name: "–Ω–∞–¥—è—Å–Ω–æ" }
  ];
  
  while (queue.length > 0) {
    const curr = queue.shift();
    if (maze[curr.row][curr.col] === 4) {
      return curr.path.length > 0 ? curr.path[0] : null;
    }
    for (const dir of directions) {
      const nr = curr.row + dir.dr;
      const nc = curr.col + dir.dc;
      if (isValid(nr, nc) && !visited[nr][nc]) {
        visited[nr][nc] = true;
        const newPath = [...curr.path, dir];
        queue.push({ row: nr, col: nc, path: newPath });
      }
    }
  }
  return null;
}

// BFS ‚Äì –∫—Ä–∞—Ç—ä–∫ –ø—ä—Ç
function getShortestPathDistance(maze, startPos) {
  const rows = maze.length;
  const cols = maze[0].length;
  const visited = Array.from({ length: rows }, () => Array(cols).fill(false));
  const queue = [];
  queue.push({ row: startPos.row, col: startPos.col, dist: 0 });
  visited[startPos.row][startPos.col] = true;
  
  while (queue.length > 0) {
    const curr = queue.shift();
    if (maze[curr.row][curr.col] === 4) {
      return curr.dist;
    }
    const directions = [
      { dr: -1, dc: 0 },
      { dr: 1, dc: 0 },
      { dr: 0, dc: -1 },
      { dr: 0, dc: 1 }
    ];
    for (let d of directions) {
      const nr = curr.row + d.dr;
      const nc = curr.col + d.dc;
      if (
        nr >= 0 && nr < rows &&
        nc >= 0 && nc < cols &&
        maze[nr][nc] !== 1 &&
        !visited[nr][nc]
      ) {
        visited[nr][nc] = true;
        queue.push({ row: nr, col: nc, dist: curr.dist + 1 });
      }
    }
  }
  return Infinity;
}

// –ê—É–¥–∏–æ
let backgroundMusic, doorSound, correctSound, wrongSound;

// // DOMContentLoaded
//   document.addEventListener('DOMContentLoaded', () => {
//     // —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –∫–æ–¥
    
//     // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –±—É—Ç–æ–Ω–∞ "–ù–í–û"
//     document.getElementById('nvo-btn').addEventListener('click', () => {
//       const nvoModal = document.getElementById('nvo-modal');
//       nvoModal.classList.remove('hidden');
//       nvoModal.classList.add('visible');
//     });
  
//     // –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª–∞
//     document.getElementById('nvo-close-btn').addEventListener('click', () => {
//       const nvoModal = document.getElementById('nvo-modal');
//       nvoModal.classList.remove('visible');
//       nvoModal.classList.add('hidden');
//     });
  
//     // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –±—É—Ç–æ–Ω–∞ "–í—Ö–æ–¥" –≤ –º–æ–¥–∞–ª–∞ –∑–∞ –ù–í–û
//     document.getElementById('nvo-select-btn').addEventListener('click', () => {
//       const select = document.getElementById('nvo-year-select');
//       const selectedKey = select.value; // –Ω–∞–ø—Ä. "nvo2022"
//       console.log("–ò–∑–±—Ä–∞–Ω–∏—è—Ç –∫–ª—é—á –µ:", selectedKey);
//       if (!selectedKey) {
//         alert("–ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –≥–æ–¥–∏–Ω–∞!");
//         return;
//       }
//       const nvoModal = document.getElementById('nvo-modal');
//       nvoModal.classList.remove('visible');
//       nvoModal.classList.add('hidden');
//       selectAuthor(selectedKey);
    
  
//   });
document.addEventListener('DOMContentLoaded', () => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –±—É—Ç–æ–Ω–∞ "–ù–í–û"
  document.getElementById('nvo-btn').addEventListener('click', () => {
    const nvoModal = document.getElementById('nvo-modal');
    nvoModal.classList.remove('hidden');
    nvoModal.classList.add('visible');
  });

  // –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª–∞ –∑–∞ –ù–í–û
  document.getElementById('nvo-close-btn').addEventListener('click', () => {
    const nvoModal = document.getElementById('nvo-modal');
    nvoModal.classList.remove('visible');
    nvoModal.classList.add('hidden');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –±—É—Ç–æ–Ω–∞ "–í—Ö–æ–¥" –≤ –º–æ–¥–∞–ª–∞ –∑–∞ –ù–í–û
  document.getElementById('nvo-select-btn').addEventListener('click', () => {
    const select = document.getElementById('nvo-year-select');
    const selectedKey = select.value; // –Ω–∞–ø—Ä. "nvo2022"
    console.log("–ò–∑–±—Ä–∞–Ω–∏—è—Ç –∫–ª—é—á –µ:", selectedKey);
    if (!selectedKey) {
      alert("–ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –≥–æ–¥–∏–Ω–∞!");
      return;
    }
    const nvoModal = document.getElementById('nvo-modal');
    nvoModal.classList.remove('visible');
    nvoModal.classList.add('hidden');
    selectAuthor(selectedKey);
  
});

  
  // –ê—É–¥–∏–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  backgroundMusic = new Audio('audio/epic-adventure.mp3');
  backgroundMusic.loop = true;
  backgroundMusic.volume = 0.2;
  
  doorSound = new Audio('audio/door-creak.mp3');
  doorSound.volume = 0.2;
  correctSound = new Audio('audio/correct.mp3');
  correctSound.volume = 0.5;
  wrongSound = new Audio('audio/wrong.mp3');
  wrongSound.volume = 0.5;
  
  // –õ–æ–≥–∏–Ω
  const loginModal = document.getElementById('login-modal');
  document.getElementById('login-btn').addEventListener('click', () => {
    const username = document.getElementById('username').value.trim();
    if (!username) {
      alert("–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ.");
      return;
    }
    currentUser = username;
    document.getElementById('display-username').textContent = currentUser;
    loginModal.classList.remove('visible');
    loginModal.classList.add('hidden');
  });
  
  // –ë—É—Ç–æ–Ω–∏ "–í—Ö–æ–¥" –Ω–∞ –∫–∞—Ä—Ç–∏—Ç–µ
  document.querySelectorAll('.enter-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const card = e.target.closest('.card');
      const author = card.dataset.author;
      selectAuthor(author);
    });
  });
  
  // –§–ª–∏–ø–≤–∞–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–∏—Ç–µ –ø—Ä–∏ –∫–ª–∏–∫
  document.querySelectorAll('.card').forEach(card => {
    card.addEventListener('click', () => {
      card.querySelector('.card-inner').classList.toggle('flipped');
    });
  });
  
  // –ë—É—Ç–æ–Ω "–ù–∞–∑–∞–¥ –∫—ä–º –∞–≤—Ç–æ—Ä–∏—Ç–µ"
  document.getElementById('back-to-authors').addEventListener('click', () => {
    backgroundMusic.pause();
    backgroundMusic.currentTime = 0;
    currentAuthor = null;
    currentLevel = 1;
    score = 0;
    document.getElementById('score').textContent = score;
    document.getElementById('current-level').textContent = currentLevel;
    document.getElementById('labyrinth-title').textContent = "–õ–∞–±–∏—Ä–∏–Ω—Ç";
    document.getElementById('author-selection').classList.remove('hidden');
    document.getElementById('game-container').classList.add('hidden');
  });
  
  // –î–≤–∏–∂–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ç–∞
  document.addEventListener('keydown', (e) => {
    const moves = {
      ArrowUp: { dr: -1, dc: 0 },
      ArrowDown: { dr: 1, dc: 0 },
      ArrowLeft: { dr: 0, dc: -1 },
      ArrowRight: { dr: 0, dc: 1 }
    };
    if (moves[e.key]) {
      const { dr, dc } = moves[e.key];
      const newRow = playerPos.row + dr;
      const newCol = playerPos.col + dc;
      if (
        newRow >= 0 && newRow < currentMaze.length &&
        newCol >= 0 && newCol < currentMaze[0].length &&
        revealedMaze[newRow][newCol] === 0
      ) {
        movePlayer(newRow, newCol);
      }
    }
  });
  
  // –ë—É—Ç–æ–Ω "–°–ª–µ–¥–≤–∞—â–æ –Ω–∏–≤–æ"
  document.getElementById('next-level').addEventListener('click', () => {
    if (currentLevel < MAX_LEVEL) {
      currentLevel++;
      document.getElementById('current-level').textContent = currentLevel;
      loadMazeLevel(currentAuthor, currentLevel);
      document.getElementById('next-level').classList.add('hidden');
    } else {
      alert("–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –ü—Ä–∏–∫–ª—é—á–∏—Ö—Ç–µ –≤—Å–∏—á–∫–∏ –Ω–∏–≤–∞.");
    }
  });
  
  // –ë—É—Ç–æ–Ω "–ü—Ä–∞–≤–∏–ª–∞ –Ω–∞ –∏–≥—Ä–∞—Ç–∞"
  const rulesModal = document.getElementById('rules-modal');
  document.getElementById('rules-btn').addEventListener('click', () => {
    rulesModal.classList.remove('hidden');
  });
  document.getElementById('close-rules').addEventListener('click', () => {
    rulesModal.classList.add('hidden');
  });
  
  // –ë—É—Ç–æ–Ω "–ó–∞—Ç–≤–æ—Ä–∏" –∑–∞ –≤—ä–ø—Ä–æ—Å–Ω–∏—è –º–æ–¥–∞–ª
  document.getElementById('close-question-btn').addEventListener('click', closeQuestionModal);
  
  // –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –∞–≤—Ç–æ—Ä
  function selectAuthor(author) {
    currentAuthor = author;
    backgroundMusic.play();
    
    // –°–∫—Ä–∏–≤–∞–º–µ –µ–∫—Ä–∞–Ω —Å –∫–∞—Ä—Ç–∏—Ç–µ, –ø–æ–∫–∞–∑–≤–∞–º–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    document.getElementById('author-selection').classList.add('hidden');
    document.getElementById('game-container').classList.remove('hidden');
    
    // –°–º–µ–Ω—è–º–µ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ
    document.getElementById('labyrinth-title').textContent =
      "–õ–∞–±–∏—Ä–∏–Ω—Ç: " + (authorDisplayName[currentAuthor] || currentAuthor);
    
    initMazeFromAuthor();
  }
});



